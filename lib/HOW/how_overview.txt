# 부동산 관리 앱 프로젝트 전체 개요 및 구조 분석

## 📋 프로젝트 개요
이 프로젝트는 Flutter로 개발된 부동산 관리 앱으로, 등기부등본 조회, 계약서 작성, 매물 관리 기능을 제공합니다.

### 주요 기능
1. **등기부등본 조회**: 도로명주소 검색 → 등기부등본 API 조회 → 소유자 검증
2. **계약서 작성**: 등기부등본 데이터 기반 자동 입력 → 사용자 수정 → PDF 생성
3. **매물 관리**: Property 모델 기반 매물 저장 및 목록 관리
4. **계약 관리**: 작성된 계약서 목록 및 상태 관리

## 🏗️ 프로젝트 구조

### 1. 메인 진입점 (lib/main.dart)
**파일 크기**: 1602줄
**주요 클래스**:
- `MyApp`: 앱 초기화 및 테마 설정
- `LoginPage`: 로그인 화면 (테스트 계정: test/1234)
- `MainPage`: 메인 네비게이션 (5개 탭)
- `HouseMarketPage`: 매물 목록 화면
- `HistoryPage`: 이력 조회 화면
- `PersonalInfoPage`: 개인정보 화면

**세부 구조**:
```dart
// 앱 초기화 (라인 12-18)
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

// 테마 설정 (라인 25-40)
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Property App',
      theme: ThemeData(
        primaryColor: AppColors.kBrown,
        scaffoldBackgroundColor: Colors.white,
        fontFamily: 'NotoSansKR',
      ),
      home: const LoginPage(),
    );
  }
}
```

**로그인 로직 (라인 45-100)**:
```dart
class _LoginPageState extends State<LoginPage> {
  final TextEditingController _idController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;

  Future<bool> _performLogin() async {
    setState(() { _isLoading = true; });
    
    final isValid = _idController.text == TestConstants.tempId && 
                   _passwordController.text == TestConstants.tempPassword;
    
    await Future.delayed(const Duration(seconds: 1));
    
    setState(() { _isLoading = false; });
    return isValid;
  }
}
```

**메인 네비게이션 (라인 250-320)**:
```dart
class _MainPageState extends State<MainPage> {
  int _selectedIndex = 0;

  final List<Widget> pages = [
    HomePage(userName: widget.userName),           // 내집팔기
    const HouseMarketPage(),                      // 내집사기
    const HistoryPage(),                          // 이력조회
    ContractManagementScreen(userName: widget.userName), // 계약관리
    const PersonalInfoPage(),                     // 개인정보
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${widget.userName}님, 안녕하세요'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: _logout,
          ),
        ],
      ),
      body: pages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.sell), label: '내집팔기'),
          BottomNavigationBarItem(icon: Icon(Icons.home), label: '내집사기'),
          BottomNavigationBarItem(icon: Icon(Icons.history), label: '이력조회'),
          BottomNavigationBarItem(icon: Icon(Icons.description), label: '계약관리'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: '개인정보'),
        ],
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
      ),
    );
  }
}
```

**매물 목록 표시 (라인 350-450)**:
```dart
class _HouseMarketPageState extends State<HouseMarketPage> {
  List<Property> properties = [];
  final List<String> houseImages = [
    'assets/sample_house.jpg',
    'assets/sample_house2.jpg',
    'assets/sample_house3.jpg',
  ];

  @override
  Widget build(BuildContext context) {
    return properties.isEmpty
        ? Center(child: Text('등록된 매물이 없습니다.'))
        : ListView.builder(
            itemCount: properties.length,
            itemBuilder: (context, index) {
              final property = properties[index];
              final imgPath = houseImages[index % houseImages.length];
              
              // total_amount 파싱
              int? totalAmount;
              try {
                final regData = property.registerData;
                if (regData.isNotEmpty && regData != '{}') {
                  final map = json.decode(regData);
                  if (map['total_amount'] != null) {
                    totalAmount = int.tryParse(map['total_amount'].toString().replaceAll(',', ''));
                  }
                }
              } catch (_) {}
              
              return Card(
                child: Column(
                  children: [
                    Image.asset(imgPath, height: 160, fit: BoxFit.cover),
                    Text(property.address, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                    Text('거래유형: ${property.transactionType}'),
                    if (totalAmount != null)
                      Text('가격: ${totalAmount.toString().replaceAllMapped(RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'), (Match m) => '${m[1]},')}원'),
                  ],
                ),
              );
            },
          );
  }
}
```

### 2. 핵심 화면별 상세 구조

#### 2.1 내집팔기 (HomePage - lib/screens/home_page.dart)
**파일 크기**: 910줄
**주요 기능**: 등기부등본 조회 및 계약서 작성 진입점

**클래스 구조**:
```dart
class HomePage extends StatefulWidget {
  final String userName;
  const HomePage({super.key, required this.userName});
}

class _HomePageState extends State<HomePage> {
  // 상태 변수들
  String address = '';
  final TextEditingController _controller = TextEditingController();
  final TextEditingController _detailController = TextEditingController();
  String roadAddress = '';
  bool isLoading = false;
  List<String> roadAddressList = [];
  String detailAddress = '';
  String fullAddress = '';
  bool isRegisterLoading = false;
  Map<String, dynamic>? registerResult;
  String? registerError;
  String? ownerMismatchError;
  bool isSaving = false;
  String? saveMessage;
  List<Map<String, dynamic>> estates = [];
  int currentPage = 1;
  int totalCount = 0;
  Map<String, String> parsedAddress1st = {};
  Map<String, String> parsedDetail = {};
  List<Property> properties = [];
}
```

**주요 메서드들**:
- `searchRoadAddress()`: 도로명주소 검색 (라인 180-210)
- `searchRegister()`: 등기부등본 조회 (라인 220-280)
- `checkOwnerName()`: 소유자 검증 (라인 70-95)
- `saveRegisterDataToDatabase()`: 등기부등본 정보 저장 (라인 120-160)
- `_addProperty()`: Property 객체 메모리 저장 (라인 50-55)

#### 2.2 계약서 작성 (ContractInputFormScreen - lib/screens/contract_input_form.dart)
**파일 크기**: 430줄
**주요 기능**: 주택임대차계약서 작성

**클래스 구조**:
```dart
class ContractInputFormScreen extends StatefulWidget {
  final Map<String, dynamic>? initialData;
  final String? userName;
  final Property? property;
}

class _ContractInputFormScreenState extends State<ContractInputFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, dynamic> _formData = {};
  
  // 날짜 컨트롤러들
  final TextEditingController _handoverDateController = TextEditingController();
  final TextEditingController _contractStartController = TextEditingController();
  final TextEditingController _contractEndController = TextEditingController();
  final TextEditingController _repairCompletionDateController = TextEditingController();
  final TextEditingController _contractDateController = TextEditingController();
}
```

**주요 메서드들**:
- `_autoFillFromParsedData()`: 등기부등본 데이터로 자동 입력 (라인 30-80)
- `_pickDate()`: 날짜 선택 (라인 100-110)
- `_resetForm()`: 폼 초기화 (라인 115-125)
- `_textField()`: 텍스트 필드 위젯 (라인 280-320)
- `_dateField()`: 날짜 필드 위젯 (라인 325-355)
- `_radioGroup()`: 라디오 버튼 그룹 위젯 (라인 360-395)

#### 2.3 계약 관리 (ContractManagementScreen - lib/screens/contract_management_screen.dart)
**파일 크기**: 447줄
**주요 기능**: 작성된 계약서 관리

**클래스 구조**:
```dart
class ContractManagementScreen extends StatefulWidget {
  final String userName;
  const ContractManagementScreen({Key? key, required this.userName});
}

class _ContractManagementScreenState extends State<ContractManagementScreen> {
  List<Property> myProperties = [];
  bool isLoading = false;
}
```

**주요 메서드들**:
- `_buildHouseLeaseAgreementInfo()`: 계약서 정보 표시 (라인 20-50)
- `_buildLeftSection()`: 구매 계약서 관리 섹션 (라인 80-150)
- `_buildRightSection()`: 판매 매물 계약서 관리 섹션 (라인 155-250)

#### 2.4 상세 내용 입력 (WhathouseDetailFormScreen - lib/screens/whathouse_detail_form.dart)
**파일 크기**: 743줄
**주요 기능**: 계약서 상세 내용 입력

**클래스 구조**:
```dart
class WhathouseDetailFormScreen extends StatefulWidget {
  final Map<String, dynamic>? initialData;
  final String userName;
}

class _WhathouseDetailFormScreenState extends State<WhathouseDetailFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final Map<String, dynamic> _formData = {};
}
```

**주요 메서드들**:
- `_saveTotalAmount()`: 총 금액 계산 (라인 25-35)
- `_submitForm()`: 폼 제출 (라인 37-65)
- `_textField()`: 텍스트 필드 위젯 (라인 75-95)
- `_radioGroup()`: 라디오 버튼 그룹 위젯 (라인 97-120)
- `_numberField()`: 숫자 필드 위젯 (라인 122-125)

### 3. 서비스 레이어 상세 구조

#### 3.1 AddressService (lib/services/address_service.dart)
**파일 크기**: 150줄
**주요 기능**: 도로명주소 검색 API 연동

**클래스 구조**:
```dart
class AddressSearchResult {
  final List<String> addresses;
  final int totalCount;
  final String? errorMessage;
}

class AddressService {
  static final AddressService instance = AddressService._init();
  AddressService._init();
}
```

**주요 메서드들**:
- `searchRoadAddress()`: 도로명주소 검색 (라인 20-80)
- `getAddressDetail()`: 특정 주소 상세 정보 조회 (라인 85-120)

#### 3.2 RegisterService (lib/services/register_service.dart)
**파일 크기**: 215줄
**주요 기능**: 등기부등본 조회 API 연동

**클래스 구조**:
```dart
class RegisterService {
  static final RegisterService instance = RegisterService._init();
  RegisterService._init();
}
```

**주요 메서드들**:
- `getCodefAccessToken()`: CODEF API 액세스 토큰 발급 (라인 15-40)
- `rsaEncrypt()`: RSA 암호화 (라인 45-50)
- `getRealEstateRegister()`: 등기부등본 조회 (라인 55-150)
- `extractOwnerNamesFromEntry()`: 소유자 이름 추출 (라인 155-160)
- `generateRegisterSummary()`: 등기부등본 요약 정보 생성 (라인 165-200)

### 4. 데이터 모델 상세 구조

#### 4.1 Property 모델 (lib/models/property.dart)
**파일 크기**: 103줄
**주요 기능**: 부동산 데이터 모델

**클래스 구조**:
```dart
class Property {
  final int? id;                    // SQLite database ID (AUTO INCREMENT)
  final String address;             // 부동산 주소
  final String transactionType;     // 매매, 전세, 월세
  final int price;                  // 가격
  final String description;         // 설명
  final String registerData;        // JSON 문자열로 저장된 등기부등본 데이터
  final String registerSummary;     // 핵심 정보만 담은 JSON
  final String contractStatus;      // 계약 상태
  final String mainContractor;      // 대표 계약자
  final String contractor;          // 계약자(한글/영문 이름)
  final DateTime createdAt;         // 생성일

  Property({
    this.id,
    required this.address,
    required this.transactionType,
    required this.price,
    String? description,
    String? registerData,
    String? registerSummary,
    String? contractStatus,
    String? mainContractor,
    String? contractor,
    DateTime? createdAt,
  })  : description = description ?? '',
        registerData = registerData ?? '{}',
        registerSummary = registerSummary ?? '',
        contractStatus = contractStatus ?? '대기',
        mainContractor = mainContractor ?? '',
        contractor = contractor ?? '',
        createdAt = createdAt ?? DateTime.now();
}
```

**주요 메서드들**:
- `toMap()`: Map으로 변환 (라인 35-50)
- `fromMap()`: Map에서 객체 생성 (라인 52-75)
- `copyWith()`: 객체 복사 (라인 77-103)

### 5. 유틸리티 클래스 상세 구조

#### 5.1 AddressParser (lib/utils/address_parser.dart)
**파일 크기**: 93줄
**주요 기능**: 주소 파싱 및 정제

**클래스 구조**:
```dart
class AddressParser {
  // 정적 메서드만 제공
}
```

**주요 메서드들**:
- `parseAddress1st()`: 1차 주소 파싱 (라인 4-50)
- `parseDetailAddress()`: 2차 상세주소 파싱 (라인 52-80)

#### 5.2 OwnerParser (lib/utils/owner_parser.dart)
**파일 크기**: 92줄
**주요 기능**: 등기부등본에서 소유자 정보 추출

**주요 함수**:
- `extractOwnerNames()`: 소유자 이름 추출 (라인 1-92)

#### 5.3 CurrentStateParser (lib/utils/current_state_parser.dart)
**파일 크기**: 303줄
**주요 기능**: 등기부등본 현재 상태 파싱

**클래스 구조**:
```dart
class Header { /* 문서 헤더 정보 */ }
class Ownership { /* 소유권 정보 */ }
class LandArea { /* 토지 면적 정보 */ }
class FloorInfo { /* 층별 정보 */ }
class BuildingArea { /* 건물 면적 정보 */ }
class Lien { /* 저당권 정보 */ }
class CurrentState { /* 전체 현재 상태 */ }
```

**주요 함수들**:
- `clean()`: 텍스트 정제 (라인 60-65)
- `filterOwnerRaw()`: 소유자 정보 필터링 (라인 67-75)
- `filterMainText()`: 주요 텍스트 필터링 (라인 77-85)
- `findDetailByPrefix()`: 접두사로 상세 정보 찾기 (라인 87-95)
- `findDetailContains()`: 키워드로 상세 정보 찾기 (라인 97-105)
- `formatDate()`: 날짜 형식 변환 (라인 107-115)
- `cleanRealtyDesc()`: 부동산 설명 정제 (라인 117-130)
- `parseCurrentState()`: 현재 상태 파싱 (라인 132-303)

### 6. 상수 및 설정 상세 구조

#### 6.1 AppConstants (lib/constants/app_constants.dart)
**파일 크기**: 75줄
**주요 기능**: 앱 설정 및 상수 정의

**클래스 구조**:
```dart
class AppColors {
  static const Color kBrown = Color(0xFF1976D2);
  static const Color kLightBrown = Color(0xFFF5F5F5);
  static const Color kDarkBrown = Color(0xFF0D1333);
}

class CodefApiKeys {
  static const String clientId = 'YOUR_CODEF_CLIENT_ID';
  static const String clientSecret = 'YOUR_CODEF_CLIENT_SECRET';
  static const String publicKey = 'YOUR_CODEF_PUBLIC_KEY';
}

class ApiConstants {
  static const String jusoApiKey = 'devU01TX0FVVEgyMDI1MDUyMjAyMDQ1MjExNTc2ODQ=';
  static const String registerApiKey = 'devU01TX0FVVEgyMDI1MDUwODAzMzQ0NDExNTcyNjY=';
  static const String baseJusoUrl = 'https://business.juso.go.kr/addrlink/addrLinkApi.do';
  static const int requestTimeoutSeconds = 10;
  static const int pageSize = 10;
}

class TestConstants {
  static const String tempId = 'test';
  static const String tempPassword = '1234';
  static const String tempPhoneNo = '010-2394-3962';
  static const String tempUserName = '김태형';
  static const String ePrepayNo = 'B90660318005';
  static const String tempCodefPassword = 'A7MilaBGAhxI35F1rhXQscXserkQoz9ZvT7GBCsfVF68curqeV3miATmOJAVyJJN6/MFlwOM9nzaPXr4lhhoLW7APB9S8/YoghUrUNidoOS07X/hRz0yc21k7SBXdjRbYOOgzZNoM6Xwo7xHIO8JULLjVwZNkralC5JnMOwCOxXQ+xGY2BFLD2BqfYDeKAGV7EejhU77lVWGb4Ln73zt/aqPXuSVBhU5BOiZJwZoe703o/VloTyINWR1sU8BFFVpDJziDWFhmby/pfKL7c30YeQSrlSaAl6Is3bPpn4GYj+1FCJL5nP9IYxhoeqyPLTHpmM5FoNeNTKLcfLOgKgkZg==';
}

class RegionConstants {
  static const Map<String, List<String>> sidoSigunguMap = {
    "서울특별시": ["강남구", "강동구", "강북구", "강서구", "관악구", "광진구", "구로구", "금천구", "노원구", "도봉구", "동대문구", "동작구", "마포구", "서대문구", "서초구", "성동구", "성북구", "송파구", "양천구", "영등포구", "용산구", "은평구", "종로구", "중구", "중랑구"],
    "부산광역시": ["강서구", "금정구", "기장군", "남구", "동구", "동래구", "법인구", "부산진구", "북구", "사상구", "사하구", "서구", "수영구", "연제구", "영도구", "중구", "해운대구"],
    // ... 기타 시도별 시군구 목록
  };
}
```

### 7. 에셋 및 리소스 구조

#### 7.1 폰트 (assets/fonts/static/)
- NotoSansKR-Black.ttf
- NotoSansKR-Bold.ttf
- NotoSansKR-ExtraBold.ttf
- NotoSansKR-ExtraLight.ttf
- NotoSansKR-Light.ttf
- NotoSansKR-Medium.ttf
- NotoSansKR-Regular.ttf
- NotoSansKR-SemiBold.ttf
- NotoSansKR-Thin.ttf

#### 7.2 이미지 (assets/)
- sample_house.jpg
- sample_house2.jpg
- sample_house3.jpg

#### 7.3 계약서 템플릿 (assets/contracts/)
- House_Lease_Agreement/: 임대차계약서 템플릿
- whathouse/: WhatHouse 계약서 템플릿

#### 7.4 테스트 데이터 (assets/)
- testcase.txt: 등기부등본 테스트 데이터

### 8. 의존성 및 설정 파일

#### 8.1 pubspec.yaml
**주요 의존성**:
- flutter: ^3.0.0
- http: ^0.13.0 (API 호출)
- encrypt: ^5.0.0 (RSA 암호화)
- pointycastle: ^3.0.0 (암호화 알고리즘)
- fl_chart: ^0.60.0 (차트 표시)

#### 8.2 플랫폼별 설정
- **Android**: android/app/build.gradle.kts
- **iOS**: ios/Runner/Info.plist
- **Web**: web/index.html
- **Windows**: windows/runner/main.cpp
- **macOS**: macos/Runner/AppDelegate.swift
- **Linux**: linux/runner/main.cc

### 9. 데이터베이스 구조 (현재 미사용)

#### 9.1 DatabaseHelper (lib/database/database_helper.dart)
**현재 상태**: 구현되어 있지만 사용되지 않음
**설계**: SQLite 기반 Property 테이블

### 10. 전체 파일 구조 요약

```
lib/
├── main.dart (1602줄) - 앱 진입점, 로그인, 메인 네비게이션
├── constants/
│   └── app_constants.dart (75줄) - 앱 설정 및 상수
├── models/
│   └── property.dart (103줄) - 부동산 데이터 모델
├── screens/
│   ├── home_page.dart (910줄) - 등기부등본 조회 메인 화면
│   ├── contract_input_form.dart (430줄) - 계약서 작성 화면
│   ├── contract_management_screen.dart (447줄) - 계약서 관리 화면
│   ├── whathouse_detail_form.dart (743줄) - 상세 내용 입력 화면
│   ├── address_search_screen.dart - 주소 검색 화면 (미사용)
│   ├── contract_form_screen.dart - 계약서 폼 화면 (미사용)
│   └── pdf_view_screen.dart - PDF 뷰어 화면
├── services/
│   ├── address_service.dart (150줄) - 주소 검색 API 서비스
│   ├── register_service.dart (215줄) - 등기부등본 조회 API 서비스
│   └── firebase_service.dart - Firebase 서비스 (미사용)
├── utils/
│   ├── address_parser.dart (93줄) - 주소 파싱 유틸리티
│   ├── owner_parser.dart (92줄) - 소유자 정보 추출 유틸리티
│   └── current_state_parser.dart (303줄) - 등기부등본 파싱 유틸리티
└── database/
    └── database_helper.dart - 데이터베이스 헬퍼 (미사용)
```

### 11. 주요 제약사항 및 한계

1. **데이터베이스**: 현재 메모리 기반 저장으로 앱 재시작 시 데이터 손실
2. **API 키**: 하드코딩된 테스트 키 사용 (보안 위험)
3. **에러 처리**: 네트워크 오류 및 API 오류 처리 미흡
4. **보안**: 실제 운영 환경 보안 강화 필요
5. **성능**: 대용량 데이터 처리 최적화 필요
6. **테스트**: 단위 테스트 및 통합 테스트 부재

### 12. 향후 개선 방향

1. **데이터베이스 연동**: SQLite 또는 Firebase Firestore 연동
2. **보안 강화**: API 키 환경변수 관리, 토큰 관리 개선
3. **에러 처리**: 네트워크 오류, API 오류, 사용자 입력 오류 처리 강화
4. **성능 최적화**: 이미지 캐싱, 데이터 로딩 최적화
5. **테스트 코드**: 단위 테스트, 위젯 테스트, 통합 테스트 추가
6. **UI/UX 개선**: 사용자 경험 개선, 접근성 강화
7. **기능 확장**: 지도 연동, 푸시 알림, 결제 연동 등
</rewritten_file> 