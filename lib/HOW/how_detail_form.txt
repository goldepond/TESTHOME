# 상세 내용 입력 프로세스 상세 분석

## 📋 상세 내용 입력 전체 흐름

### 1. 상세 내용 입력 진입 단계

#### 1.1 상세 내용 입력 화면 초기화 (lib/screens/whathouse_detail_form.dart 라인 1-30)
```dart
class WhathouseDetailFormScreen extends StatefulWidget {
  final Map<String, dynamic>? initialData;              // 초기 데이터 (등기부등본 정보)
  final String userName;                                // 사용자 이름
  const WhathouseDetailFormScreen({Key? key, required this.initialData, required this.userName});
}

class _WhathouseDetailFormScreenState extends State<WhathouseDetailFormScreen> {
  final _formKey = GlobalKey<FormState>();              // 폼 검증용 키
  final Map<String, dynamic> _formData = {};            // 폼 데이터 저장소
  
  // 금액 관련 변수들
  int totalAmount = 0;                                  // 총 금액
  int depositAmount = 0;                                // 보증금
  int monthlyRent = 0;                                  // 월세
  int managementFee = 0;                                // 관리비
  
  @override
  void initState() {
    super.initState();
    // 초기 데이터로 폼 자동 입력
    _initializeFormData();
  }
```

#### 1.2 폼 데이터 초기화 (lib/screens/whathouse_detail_form.dart 라인 25-35)
```dart
// 초기 데이터로 폼 자동 입력
void _initializeFormData() {
  if (widget.initialData != null) {
    try {
      // 등기부등본 데이터 파싱
      final rawJson = json.encode(widget.initialData);
      final currentState = parseCurrentState(rawJson);
      
      // 기본 정보 자동 입력
      _formData['property_address'] = currentState.header.realtyDesc;  // 부동산 주소
      _formData['property_type'] = currentState.building.structure;    // 건물 구조
      _formData['property_area'] = currentState.building.areaTotal;    // 건물 면적
      _formData['owner_name'] = currentState.ownership.ownerRaw;       // 소유자 이름
      _formData['owner_address'] = currentState.ownership.ownerAddress; // 소유자 주소
      _formData['registration_office'] = currentState.header.officeName; // 등기소
      _formData['registration_number'] = currentState.header.publishNo;  // 등기번호
      
      // 기본 계약 조건 설정
      _formData['transaction_type'] = '매매';                          // 거래 유형
      _formData['deposit_amount'] = '10000000';                        // 보증금 (기본값: 1000만원)
      _formData['monthly_rent'] = '0';                                 // 월세 (매매는 0)
      _formData['management_fee'] = '0';                               // 관리비 (매매는 0)
      _formData['contractor_name'] = widget.userName;                  // 계약자 (로그인 사용자)
      
      // 금액 계산
      _saveTotalAmount();
      
    } catch (e) {
      print('초기 데이터 파싱 오류: $e');
      _setDefaultValues();
    }
  } else {
    _setDefaultValues();
  }
  
  setState(() {});
}
```

#### 1.3 기본값 설정 (lib/screens/whathouse_detail_form.dart 라인 35-50)
```dart
// 기본값 설정 (파싱 실패 시 사용)
void _setDefaultValues() {
  _formData['transaction_type'] = '매매';
  _formData['deposit_amount'] = '10000000';
  _formData['monthly_rent'] = '0';
  _formData['management_fee'] = '0';
  _formData['contractor_name'] = widget.userName;
  _formData['property_address'] = '';
  _formData['property_type'] = '';
  _formData['property_area'] = '';
  _formData['owner_name'] = '';
  _formData['owner_address'] = '';
  _formData['registration_office'] = '';
  _formData['registration_number'] = '';
  
  _saveTotalAmount();
}
```

### 2. 총 금액 계산 단계

#### 2.1 총 금액 계산 함수 (lib/screens/whathouse_detail_form.dart 라인 25-35)
```dart
// 총 금액 계산 및 저장
void _saveTotalAmount() {
  try {
    // 보증금 파싱
    depositAmount = int.tryParse(_formData['deposit_amount']?.toString().replaceAll(',', '') ?? '0') ?? 0;
    
    // 월세 파싱 (12개월치)
    monthlyRent = int.tryParse(_formData['monthly_rent']?.toString().replaceAll(',', '') ?? '0') ?? 0;
    final yearlyRent = monthlyRent * 12;
    
    // 관리비 파싱 (12개월치)
    managementFee = int.tryParse(_formData['management_fee']?.toString().replaceAll(',', '') ?? '0') ?? 0;
    final yearlyManagementFee = managementFee * 12;
    
    // 총 금액 계산
    totalAmount = depositAmount + yearlyRent + yearlyManagementFee;
    
    // 폼 데이터에 총 금액 저장
    _formData['total_amount'] = totalAmount.toString();
    
    print('금액 계산 완료: 보증금=$depositAmount, 월세=$monthlyRent, 관리비=$managementFee, 총액=$totalAmount');
    
  } catch (e) {
    print('금액 계산 오류: $e');
    totalAmount = 0;
    _formData['total_amount'] = '0';
  }
}
```

### 3. 폼 UI 구성 단계

#### 3.1 메인 폼 구조 (lib/screens/whathouse_detail_form.dart 라인 100-200)
```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('상세 내용 입력'),
      backgroundColor: AppColors.kBrown,
      foregroundColor: Colors.white,
    ),
    body: Form(
      key: _formKey,                                    // 폼 검증 키
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // 1. 부동산 정보 섹션
            _buildSectionTitle('부동산 정보'),
            _textField('property_address', '부동산 주소', '부동산 주소'),
            _textField('property_type', '건물 구조', '건물 구조'),
            _textField('property_area', '건물 면적', '건물 면적'),
            
            const SizedBox(height: 20),
            
            // 2. 소유자 정보 섹션
            _buildSectionTitle('소유자 정보'),
            _textField('owner_name', '소유자 이름', '소유자 이름'),
            _textField('owner_address', '소유자 주소', '소유자 주소'),
            
            const SizedBox(height: 20),
            
            // 3. 거래 조건 섹션
            _buildSectionTitle('거래 조건'),
            _radioGroup('transaction_type', '거래 유형', ['매매', '전세', '월세']),
            _numberField('deposit_amount', '보증금', '보증금 (원)'),
            _numberField('monthly_rent', '월세', '월세 (원)'),
            _numberField('management_fee', '관리비', '관리비 (원)'),
            
            // 총 금액 표시
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              margin: const EdgeInsets.symmetric(vertical: 8),
              decoration: BoxDecoration(
                color: AppColors.kLightBrown,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: AppColors.kBrown),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '총 거래 금액',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: AppColors.kBrown,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '${totalAmount.toString().replaceAllMapped(
                      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
                      (Match m) => '${m[1]},'
                    )}원',
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.kBrown,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '(보증금: ${depositAmount.toString().replaceAllMapped(
                      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
                      (Match m) => '${m[1]},'
                    )}원 + 월세: ${(monthlyRent * 12).toString().replaceAllMapped(
                      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
                      (Match m) => '${m[1]},'
                    )}원 + 관리비: ${(managementFee * 12).toString().replaceAllMapped(
                      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
                      (Match m) => '${m[1]},'
                    )}원)',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 20),
            
            // 4. 계약자 정보 섹션
            _buildSectionTitle('계약자 정보'),
            _textField('contractor_name', '계약자 이름', '계약자 이름'),
            _textField('contractor_phone', '계약자 전화번호', '계약자 전화번호'),
            _textField('contractor_address', '계약자 주소', '계약자 주소'),
            
            const SizedBox(height: 20),
            
            // 5. 등기 정보 섹션
            _buildSectionTitle('등기 정보'),
            _textField('registration_office', '등기소', '등기소'),
            _textField('registration_number', '등기번호', '등기번호'),
            
            const SizedBox(height: 20),
            
            // 6. 특별약정 섹션
            _buildSectionTitle('특별약정'),
            _textField('special_agreement', '특별약정', '특별약정 사항'),
            
            const SizedBox(height: 30),
            
            // 7. 버튼 섹션
            _buildButtons(),
          ],
        ),
      ),
    ),
  );
}
```

#### 3.2 섹션 제목 위젯 (lib/screens/whathouse_detail_form.dart 라인 200-210)
```dart
// 섹션 제목 위젯
Widget _buildSectionTitle(String title) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: AppColors.kBrown,
      ),
    ),
  );
}
```

### 4. 폼 필드 위젯들

#### 4.1 텍스트 필드 위젯 (lib/screens/whathouse_detail_form.dart 라인 75-95)
```dart
// 텍스트 필드 위젯
Widget _textField(String key, String label, String hint) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: TextFormField(
      initialValue: _formData[key] ?? '',              // 초기값 설정
      decoration: InputDecoration(
        labelText: label,                              // 라벨 텍스트
        hintText: hint,                                // 힌트 텍스트
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        filled: true,
        fillColor: Colors.grey[50],
      ),
      onChanged: (value) {
        _formData[key] = value;                        // 값 변경 시 저장
      },
      validator: (value) {
        if (value == null || value.isEmpty) {
          return '$label을(를) 입력해주세요.';           // 필수 입력 검증
        }
        return null;
      },
    ),
  );
}
```

#### 4.2 숫자 필드 위젯 (lib/screens/whathouse_detail_form.dart 라인 122-125)
```dart
// 숫자 필드 위젯 (금액 입력용)
Widget _numberField(String key, String label, String hint) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: TextFormField(
      initialValue: _formData[key] ?? '',              // 초기값 설정
      keyboardType: TextInputType.number,              // 숫자 키보드
      decoration: InputDecoration(
        labelText: label,                              // 라벨 텍스트
        hintText: hint,                                // 힌트 텍스트
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        filled: true,
        fillColor: Colors.grey[50],
        suffixText: '원',                              // 단위 표시
      ),
      onChanged: (value) {
        _formData[key] = value;                        // 값 변경 시 저장
        _saveTotalAmount();                            // 총 금액 재계산
      },
      validator: (value) {
        if (value == null || value.isEmpty) {
          return '$label을(를) 입력해주세요.';           // 필수 입력 검증
        }
        // 숫자 형식 검증
        if (int.tryParse(value.replaceAll(',', '')) == null) {
          return '숫자로 입력해주세요.';
        }
        return null;
      },
    ),
  );
}
```

#### 4.3 라디오 버튼 그룹 위젯 (lib/screens/whathouse_detail_form.dart 라인 97-120)
```dart
// 라디오 버튼 그룹 위젯
Widget _radioGroup(String key, String label, List<String> options) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        ...options.map((option) => RadioListTile<String>(
          title: Text(option),
          value: option,
          groupValue: _formData[key] ?? options.first,  // 현재 선택된 값
          onChanged: (value) {
            setState(() {
              _formData[key] = value;                  // 선택 변경 시 저장
              
              // 거래 유형 변경 시 기본값 조정
              if (key == 'transaction_type') {
                if (value == '매매') {
                  _formData['monthly_rent'] = '0';
                  _formData['management_fee'] = '0';
                } else if (value == '전세') {
                  _formData['monthly_rent'] = '0';
                  _formData['management_fee'] = '50000';
                } else if (value == '월세') {
                  _formData['monthly_rent'] = '500000';
                  _formData['management_fee'] = '50000';
                }
                _saveTotalAmount();                    // 총 금액 재계산
              }
            });
          },
          contentPadding: EdgeInsets.zero,
        )),
      ],
    ),
  );
}
```

### 5. 폼 제출 및 검증

#### 5.1 버튼 섹션 (lib/screens/whathouse_detail_form.dart 라인 300-330)
```dart
// 버튼 섹션
Widget _buildButtons() {
  return Row(
    children: [
      // 초기화 버튼
      Expanded(
        child: ElevatedButton(
          onPressed: _resetForm,                       // 폼 초기화
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('초기화'),
        ),
      ),
      const SizedBox(width: 16),
      // 제출 버튼
      Expanded(
        child: ElevatedButton(
          onPressed: _submitForm,                      // 폼 제출
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.kBrown,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('제출'),
        ),
      ),
    ],
  );
}
```

#### 5.2 폼 초기화 함수 (lib/screens/whathouse_detail_form.dart 라인 330-350)
```dart
// 폼 초기화 함수
void _resetForm() {
  setState(() {
    _formData.clear();                                 // 폼 데이터 초기화
  });
  
  // 초기 데이터로 다시 설정
  _initializeFormData();
  
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(
      content: Text('폼이 초기화되었습니다.'),
      backgroundColor: Colors.blue,
    ),
  );
}
```

#### 5.3 폼 제출 함수 (lib/screens/whathouse_detail_form.dart 라인 37-65)
```dart
// 폼 제출 함수
void _submitForm() {
  // 1. 폼 검증 실행
  if (!_formKey.currentState!.validate()) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('입력 정보를 확인해주세요.'),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }
  
  // 2. 필수 필드 검증
  final requiredFields = [
    'property_address', 'owner_name', 'deposit_amount',
    'contractor_name'
  ];
  
  for (final field in requiredFields) {
    if (_formData[field] == null || _formData[field].toString().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('$field 필드를 입력해주세요.'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }
  }
  
  // 3. 금액 검증
  if (totalAmount <= 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('총 거래 금액은 0보다 커야 합니다.'),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }
  
  // 4. 거래 유형별 검증
  final transactionType = _formData['transaction_type'];
  if (transactionType == '월세' && monthlyRent <= 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('월세 거래의 경우 월세를 입력해주세요.'),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }
  
  // 5. 상세 내용 입력 화면으로 이동
  Navigator.push(
    context,
    MaterialPageRoute(
      builder: (context) => WhathouseDetailFormScreen(
        initialData: _formData,                        // 폼 데이터 전달
        userName: widget.userName,                     // 사용자 이름 전달
      ),
    ),
  );
}
```

### 6. WhatHouse 계약서 템플릿 연동

#### 6.1 WhatHouse 계약서 템플릿 파일 구조 (assets/contracts/whathouse/)
```
whathouse/
├── whathouse_01.html   # 계약서 페이지 1 (기본 정보)
├── whathouse_02.html   # 계약서 페이지 2 (부동산 정보)
├── whathouse_03.html   # 계약서 페이지 3 (거래 조건)
├── whathouse_04.html   # 계약서 페이지 4 (계약자 정보)
├── whathouse_05.html   # 계약서 페이지 5 (등기 정보)
├── whathouse_06.html   # 계약서 페이지 6 (특별약정)
├── whathouse_07.html   # 계약서 페이지 7 (서명)
├── whathouse_08.html   # 계약서 페이지 8 (부칙)
├── whathouse_09.html   # 계약서 페이지 9 (첨부서류)
├── whathouse_10.html   # 계약서 페이지 10 (기타)
├── whathouse_11.html   # 계약서 페이지 11 (약관)
├── whathouse_12.html   # 계약서 페이지 12 (마무리)
├── whathouse_custom.css # 커스텀 스타일
├── whathouse_style.css  # 기본 스타일
└── whathouse_pdf.pdf    # 샘플 PDF
```

#### 6.2 계약서 데이터 매핑
```javascript
// whathouse 템플릿에서 사용되는 데이터 매핑
const whathouseData = {
  // 부동산 정보
  property_address: formData.property_address,
  property_type: formData.property_type,
  property_area: formData.property_area,
  
  // 소유자 정보
  owner_name: formData.owner_name,
  owner_address: formData.owner_address,
  
  // 거래 조건
  transaction_type: formData.transaction_type,
  deposit_amount: formData.deposit_amount,
  monthly_rent: formData.monthly_rent,
  management_fee: formData.management_fee,
  total_amount: formData.total_amount,
  
  // 계약자 정보
  contractor_name: formData.contractor_name,
  contractor_phone: formData.contractor_phone,
  contractor_address: formData.contractor_address,
  
  // 등기 정보
  registration_office: formData.registration_office,
  registration_number: formData.registration_number,
  
  // 특별약정
  special_agreement: formData.special_agreement,
  
  // 계산된 정보
  yearly_rent: (parseInt(formData.monthly_rent) * 12).toString(),
  yearly_management_fee: (parseInt(formData.management_fee) * 12).toString(),
};
```

### 7. 에러 처리 및 검증

#### 7.1 주요 검증 규칙
1. **필수 필드 검증**: 부동산 주소, 소유자 이름, 보증금, 계약자 이름
2. **금액 형식 검증**: 숫자만 허용 (쉼표 제거)
3. **총 금액 검증**: 0보다 커야 함
4. **거래 유형별 검증**: 월세는 월세 금액 필수
5. **전화번호 형식 검증**: 숫자와 하이픈만 허용

#### 7.2 에러 메시지 처리
```dart
// 사용자 친화적 에러 메시지
final errorMessages = {
  'required_field': '필수 입력 항목입니다.',
  'invalid_amount': '숫자로 입력해주세요.',
  'invalid_total_amount': '총 거래 금액은 0보다 커야 합니다.',
  'invalid_monthly_rent': '월세 거래의 경우 월세를 입력해주세요.',
  'invalid_phone': '올바른 전화번호 형식으로 입력해주세요.',
};
```

### 8. 성능 최적화 및 개선사항

#### 8.1 현재 구현의 장점
1. **실시간 계산**: 금액 변경 시 즉시 총액 재계산
2. **자동 입력**: 등기부등본 데이터 기반 자동 입력
3. **거래 유형별 로직**: 거래 유형에 따른 기본값 자동 설정
4. **사용자 친화적 UI**: 직관적인 폼 구성

#### 8.2 개선 가능한 부분
1. **자동 저장**: 임시 저장 기능
2. **입력 히스토리**: 이전 입력값 기억
3. **실시간 검증**: 입력 시점에 즉시 검증
4. **계산기 기능**: 복잡한 금액 계산 도구
5. **템플릿 선택**: 다양한 계약서 템플릿

### 9. 실제 사용 예시

#### 9.1 정상적인 상세 내용 입력 흐름
```
1. 등기부등본 조회 성공
2. "상세 내용 입력" 버튼 클릭
3. WhathouseDetailFormScreen 화면 이동
4. 등기부등본 데이터 자동 입력
5. 사용자 추가 정보 입력
6. 실시간 총 금액 계산
7. 폼 검증 실행
8. WhatHouse 계약서 작성 화면으로 이동
```

#### 9.2 에러 상황 처리
```
1. 필수 필드 누락: "입력 정보를 확인해주세요."
2. 금액 형식 오류: "숫자로 입력해주세요."
3. 총 금액 0 이하: "총 거래 금액은 0보다 커야 합니다."
4. 월세 금액 누락: "월세 거래의 경우 월세를 입력해주세요."
5. 등기부등본 파싱 실패: 기본값으로 초기화
```

### 10. 금액 계산 로직 상세

#### 10.1 거래 유형별 계산 방식
```dart
// 거래 유형별 기본값 및 계산 로직
void _updateTransactionType(String type) {
  switch (type) {
    case '매매':
      // 매매: 보증금만 (월세, 관리비 0)
      _formData['monthly_rent'] = '0';
      _formData['management_fee'] = '0';
      break;
      
    case '전세':
      // 전세: 보증금 + 관리비 (월세 0)
      _formData['monthly_rent'] = '0';
      _formData['management_fee'] = '50000';  // 기본 관리비
      break;
      
    case '월세':
      // 월세: 보증금 + 월세 + 관리비
      _formData['monthly_rent'] = '500000';   // 기본 월세
      _formData['management_fee'] = '50000';  // 기본 관리비
      break;
  }
  
  _saveTotalAmount();  // 총 금액 재계산
}
```

#### 10.2 총 금액 계산 공식
```dart
// 총 금액 계산 공식
int calculateTotalAmount() {
  // 보증금 (1회성)
  int deposit = depositAmount;
  
  // 월세 (12개월치)
  int yearlyRent = monthlyRent * 12;
  
  // 관리비 (12개월치)
  int yearlyManagementFee = managementFee * 12;
  
  // 총 금액 = 보증금 + (월세 × 12) + (관리비 × 12)
  return deposit + yearlyRent + yearlyManagementFee;
}
```

이 상세 내용 입력 프로세스는 등기부등본 데이터를 기반으로 한 자동 입력부터 사용자 정의 입력, 실시간 금액 계산, 거래 유형별 로직 처리, 최종 제출까지 모든 단계를 체계적으로 처리하며, WhatHouse 계약서 템플릿과의 연동을 통해 전문적인 계약서 작성을 지원합니다. 