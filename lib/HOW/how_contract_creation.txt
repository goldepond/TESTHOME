# 계약서 작성 프로세스 상세 분석

## 📝 계약서 작성 전체 흐름

### 1. 계약서 작성 진입 단계

#### 1.1 계약서 작성 버튼 (lib/screens/home_page.dart 라인 650-680)
```dart
// 계약서 작성 버튼 (등기부등본 조회 성공 후 표시)
if (registerResult != null && ownerMismatchError == null)
  Padding(
    padding: const EdgeInsets.symmetric(horizontal: 40),
    child: Center(
      child: SizedBox(
        width: 320,
        height: 56,
        child: ElevatedButton.icon(
          onPressed: () {
            // 계약서 작성 화면으로 이동
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => ContractInputFormScreen(
                  initialData: registerResult,        // 등기부등본 데이터 전달
                  userName: widget.userName,          // 사용자 이름 전달
                  property: Property(                 // Property 객체 생성
                    address: fullAddress,             // 전체 주소
                    transactionType: '매매',          // 거래 유형
                    price: 0,                         // 가격 (나중에 입력)
                    registerData: json.encode(registerResult),  // 등기부등본 JSON
                    registerSummary: json.encode(registerResult),  // 요약 정보
                  ),
                ),
              ),
            );
          },
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.kBrown,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          icon: const Icon(Icons.edit_document, size: 24),
          label: const Text('계약서 작성하기', textAlign: TextAlign.center),
        ),
      ),
    ),
  ),
```

#### 1.2 계약서 작성 화면 초기화 (lib/screens/contract_input_form.dart 라인 15-30)
```dart
class _ContractInputFormScreenState extends State<ContractInputFormScreen> {
  final _formKey = GlobalKey<FormState>();           // 폼 검증용 키
  final Map<String, dynamic> _formData = {};         // 폼 데이터 저장소
  
  // 날짜 입력용 컨트롤러들
  final TextEditingController _handoverDateController = TextEditingController();
  final TextEditingController _contractStartController = TextEditingController();
  final TextEditingController _contractEndController = TextEditingController();
  final TextEditingController _repairCompletionDateController = TextEditingController();
  final TextEditingController _contractDateController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // 등기부등본 데이터로 자동 입력 실행
    _autoFillFromParsedData();
  }
```

### 2. 등기부등본 데이터 자동 입력 단계

#### 2.1 자동 입력 함수 (lib/screens/contract_input_form.dart 라인 30-80)
```dart
// 등기부등본 데이터를 파싱하여 폼에 자동 입력
void _autoFillFromParsedData() {
  if (widget.initialData == null) return;

  try {
    // 1. 등기부등본 원본 JSON을 CurrentStateParser로 파싱
    final rawJson = json.encode(widget.initialData);
    final currentState = parseCurrentState(rawJson);
    
    // 2. 기본 정보 자동 입력
    _formData['lessor_name'] = currentState.ownership.ownerRaw;  // 임대인 (소유자)
    _formData['lessor_address'] = currentState.ownership.ownerAddress;  // 임대인 주소
    _formData['lessor_phone'] = currentState.ownership.ownerPhone;  // 임대인 전화번호
    _formData['lessor_registration_number'] = currentState.ownership.ownerRegistrationNumber;  // 임대인 주민번호
    
    // 3. 부동산 정보 자동 입력
    _formData['property_address'] = currentState.header.realtyDesc;  // 부동산 주소
    _formData['property_type'] = currentState.building.structure;  // 건물 구조
    _formData['property_area'] = currentState.building.areaTotal;  // 건물 면적
    _formData['property_land_purpose'] = currentState.land.landPurpose;  // 토지 지목
    _formData['property_land_area'] = currentState.land.landSize;  // 토지 면적
    
    // 4. 등기 정보 자동 입력
    _formData['registration_office'] = currentState.header.officeName;  // 등기소
    _formData['registration_number'] = currentState.header.publishNo;  // 등기번호
    _formData['registration_date'] = currentState.header.publishDate;  // 등기일자
    
    // 5. 날짜 컨트롤러에 기본값 설정
    final now = DateTime.now();
    _handoverDateController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
    _contractStartController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
    _contractEndController.text = '${now.year + 2}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
    _contractDateController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
    
    // 6. 기본 계약 조건 설정
    _formData['rent_type'] = '월세';                    // 임대 유형 (기본값: 월세)
    _formData['deposit_amount'] = '10000000';          // 보증금 (기본값: 1000만원)
    _formData['monthly_rent'] = '500000';              // 월세 (기본값: 50만원)
    _formData['management_fee'] = '50000';             // 관리비 (기본값: 5만원)
    
    // 7. 계약자 정보 설정
    _formData['lessee_name'] = widget.userName ?? '';  // 임차인 (로그인 사용자)
    _formData['lessee_phone'] = '';                    // 임차인 전화번호 (사용자 입력)
    _formData['lessee_address'] = '';                  // 임차인 주소 (사용자 입력)
    
    // 8. 특별약정 기본값
    _formData['special_agreement'] = '없음';            // 특별약정 (기본값: 없음)
    
    // 9. UI 업데이트
    setState(() {});
    
  } catch (e) {
    print('등기부등본 데이터 파싱 중 오류: $e');
    // 파싱 실패 시 기본값만 설정
    _setDefaultValues();
  }
}
```

#### 2.2 기본값 설정 함수 (lib/screens/contract_input_form.dart 라인 80-95)
```dart
// 기본값 설정 (파싱 실패 시 사용)
void _setDefaultValues() {
  final now = DateTime.now();
  
  // 날짜 기본값
  _handoverDateController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
  _contractStartController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
  _contractEndController.text = '${now.year + 2}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
  _contractDateController.text = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
  
  // 계약 조건 기본값
  _formData['rent_type'] = '월세';
  _formData['deposit_amount'] = '10000000';
  _formData['monthly_rent'] = '500000';
  _formData['management_fee'] = '50000';
  _formData['lessee_name'] = widget.userName ?? '';
  
  setState(() {});
}
```

### 3. 폼 UI 구성 단계

#### 3.1 메인 폼 구조 (lib/screens/contract_input_form.dart 라인 100-150)
```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('주택임대차계약서 작성'),
      backgroundColor: AppColors.kBrown,
      foregroundColor: Colors.white,
    ),
    body: Form(
      key: _formKey,                                  // 폼 검증 키
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // 1. 계약 기본 정보 섹션
            _buildSectionTitle('계약 기본 정보'),
            _textField('lessor_name', '임대인', '임대인 성명'),
            _textField('lessor_address', '임대인 주소', '임대인 주소'),
            _textField('lessor_phone', '임대인 전화번호', '임대인 전화번호'),
            _textField('lessor_registration_number', '임대인 주민번호', '임대인 주민등록번호'),
            
            const SizedBox(height: 20),
            
            // 2. 부동산 정보 섹션
            _buildSectionTitle('부동산 정보'),
            _textField('property_address', '부동산 주소', '부동산 주소'),
            _textField('property_type', '건물 구조', '건물 구조'),
            _textField('property_area', '건물 면적', '건물 면적'),
            _textField('property_land_purpose', '토지 지목', '토지 지목'),
            _textField('property_land_area', '토지 면적', '토지 면적'),
            
            const SizedBox(height: 20),
            
            // 3. 계약 조건 섹션
            _buildSectionTitle('계약 조건'),
            _radioGroup('rent_type', '임대 유형', ['전세', '월세']),
            _textField('deposit_amount', '보증금', '보증금 (원)'),
            _textField('monthly_rent', '월세', '월세 (원)'),
            _textField('management_fee', '관리비', '관리비 (원)'),
            
            const SizedBox(height: 20),
            
            // 4. 계약 기간 섹션
            _buildSectionTitle('계약 기간'),
            _dateField('handover_date', '인도일', _handoverDateController),
            _dateField('contract_start', '계약 시작일', _contractStartController),
            _dateField('contract_end', '계약 종료일', _contractEndController),
            _dateField('repair_completion_date', '수리 완료일', _repairCompletionDateController),
            
            const SizedBox(height: 20),
            
            // 5. 임차인 정보 섹션
            _buildSectionTitle('임차인 정보'),
            _textField('lessee_name', '임차인', '임차인 성명'),
            _textField('lessee_phone', '임차인 전화번호', '임차인 전화번호'),
            _textField('lessee_address', '임차인 주소', '임차인 주소'),
            
            const SizedBox(height: 20),
            
            // 6. 등기 정보 섹션
            _buildSectionTitle('등기 정보'),
            _textField('registration_office', '등기소', '등기소'),
            _textField('registration_number', '등기번호', '등기번호'),
            _textField('registration_date', '등기일자', '등기일자'),
            
            const SizedBox(height: 20),
            
            // 7. 특별약정 섹션
            _buildSectionTitle('특별약정'),
            _textField('special_agreement', '특별약정', '특별약정 사항'),
            
            const SizedBox(height: 20),
            
            // 8. 계약일자
            _buildSectionTitle('계약일자'),
            _dateField('contract_date', '계약일', _contractDateController),
            
            const SizedBox(height: 30),
            
            // 9. 버튼 섹션
            _buildButtons(),
          ],
        ),
      ),
    ),
  );
}
```

#### 3.2 섹션 제목 위젯 (lib/screens/contract_input_form.dart 라인 150-160)
```dart
// 섹션 제목 위젯
Widget _buildSectionTitle(String title) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: AppColors.kBrown,
      ),
    ),
  );
}
```

### 4. 폼 필드 위젯들

#### 4.1 텍스트 필드 위젯 (lib/screens/contract_input_form.dart 라인 280-320)
```dart
// 텍스트 필드 위젯
Widget _textField(String key, String label, String hint) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: TextFormField(
      initialValue: _formData[key] ?? '',              // 초기값 설정
      decoration: InputDecoration(
        labelText: label,                              // 라벨 텍스트
        hintText: hint,                                // 힌트 텍스트
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        filled: true,
        fillColor: Colors.grey[50],
      ),
      onChanged: (value) {
        _formData[key] = value;                        // 값 변경 시 저장
      },
      validator: (value) {
        if (value == null || value.isEmpty) {
          return '$label을(를) 입력해주세요.';           // 필수 입력 검증
        }
        return null;
      },
    ),
  );
}
```

#### 4.2 날짜 필드 위젯 (lib/screens/contract_input_form.dart 라인 325-355)
```dart
// 날짜 필드 위젯
Widget _dateField(String key, String label, TextEditingController controller) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: TextFormField(
      controller: controller,                           // 날짜 컨트롤러 사용
      decoration: InputDecoration(
        labelText: label,                              // 라벨 텍스트
        hintText: 'YYYY-MM-DD',                        // 날짜 형식 힌트
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        filled: true,
        fillColor: Colors.grey[50],
        suffixIcon: IconButton(
          icon: const Icon(Icons.calendar_today),
          onPressed: () => _pickDate(controller),      // 날짜 선택기 호출
        ),
      ),
      onChanged: (value) {
        _formData[key] = value;                        // 값 변경 시 저장
      },
      validator: (value) {
        if (value == null || value.isEmpty) {
          return '$label을(를) 입력해주세요.';           // 필수 입력 검증
        }
        // 날짜 형식 검증 (YYYY-MM-DD)
        if (!RegExp(r'^\d{4}-\d{2}-\d{2}$').hasMatch(value)) {
          return '올바른 날짜 형식(YYYY-MM-DD)으로 입력해주세요.';
        }
        return null;
      },
    ),
  );
}
```

#### 4.3 라디오 버튼 그룹 위젯 (lib/screens/contract_input_form.dart 라인 360-395)
```dart
// 라디오 버튼 그룹 위젯
Widget _radioGroup(String key, String label, List<String> options) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        ...options.map((option) => RadioListTile<String>(
          title: Text(option),
          value: option,
          groupValue: _formData[key] ?? options.first,  // 현재 선택된 값
          onChanged: (value) {
            setState(() {
              _formData[key] = value;                  // 선택 변경 시 저장
            });
          },
          contentPadding: EdgeInsets.zero,
        )),
      ],
    ),
  );
}
```

### 5. 날짜 선택 기능

#### 5.1 날짜 선택 함수 (lib/screens/contract_input_form.dart 라인 100-110)
```dart
// 날짜 선택 함수
Future<void> _pickDate(TextEditingController controller) async {
  final DateTime? picked = await showDatePicker(
    context: context,
    initialDate: DateTime.now(),                       // 초기 날짜: 오늘
    firstDate: DateTime(2020),                         // 최소 날짜: 2020년
    lastDate: DateTime(2030),                          // 최대 날짜: 2030년
    locale: const Locale('ko', 'KR'),                  // 한국어 로케일
  );
  
  if (picked != null) {
    // 선택된 날짜를 YYYY-MM-DD 형식으로 포맷팅
    final formattedDate = '${picked.year}-${picked.month.toString().padLeft(2, '0')}-${picked.day.toString().padLeft(2, '0')}';
    controller.text = formattedDate;                   // 컨트롤러에 날짜 설정
  }
}
```

### 6. 폼 제출 및 검증

#### 6.1 버튼 섹션 (lib/screens/contract_input_form.dart 라인 400-430)
```dart
// 버튼 섹션
Widget _buildButtons() {
  return Row(
    children: [
      // 초기화 버튼
      Expanded(
        child: ElevatedButton(
          onPressed: _resetForm,                       // 폼 초기화
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('초기화'),
        ),
      ),
      const SizedBox(width: 16),
      // 계약서 작성 버튼
      Expanded(
        child: ElevatedButton(
          onPressed: _submitForm,                      // 폼 제출
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.kBrown,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('계약서 작성'),
        ),
      ),
    ],
  );
}
```

#### 6.2 폼 초기화 함수 (lib/screens/contract_input_form.dart 라인 115-125)
```dart
// 폼 초기화 함수
void _resetForm() {
  setState(() {
    _formData.clear();                                 // 폼 데이터 초기화
    _handoverDateController.clear();                   // 날짜 컨트롤러들 초기화
    _contractStartController.clear();
    _contractEndController.clear();
    _repairCompletionDateController.clear();
    _contractDateController.clear();
  });
  
  // 등기부등본 데이터로 다시 자동 입력
  _autoFillFromParsedData();
}
```

#### 6.3 폼 제출 함수 (lib/screens/contract_input_form.dart 라인 130-180)
```dart
// 폼 제출 함수
void _submitForm() {
  // 1. 폼 검증 실행
  if (!_formKey.currentState!.validate()) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('입력 정보를 확인해주세요.'),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }
  
  // 2. 필수 필드 검증
  final requiredFields = [
    'lessor_name', 'lessor_address', 'property_address',
    'deposit_amount', 'monthly_rent', 'lessee_name'
  ];
  
  for (final field in requiredFields) {
    if (_formData[field] == null || _formData[field].toString().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('$field 필드를 입력해주세요.'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }
  }
  
  // 3. 금액 필드 숫자 검증
  final amountFields = ['deposit_amount', 'monthly_rent', 'management_fee'];
  for (final field in amountFields) {
    final value = _formData[field];
    if (value != null && value.toString().isNotEmpty) {
      if (int.tryParse(value.toString().replaceAll(',', '')) == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('$field는 숫자로 입력해주세요.'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
    }
  }
  
  // 4. 계약서 데이터 구성
  final contractData = {
    ..._formData,                                      // 폼 데이터
    'contract_type': '주택임대차계약서',                // 계약서 유형
    'created_at': DateTime.now().toIso8601String(),    // 생성 시간
    'user_name': widget.userName,                      // 작성자
    'property_data': widget.property?.toMap(),         // 부동산 정보
  };
  
  // 5. 성공 메시지 표시
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(
      content: Text('계약서가 성공적으로 작성되었습니다.'),
      backgroundColor: Colors.green,
    ),
  );
  
  // 6. 이전 화면으로 돌아가기
  Navigator.pop(context, contractData);
}
```

### 7. 계약서 템플릿 연동

#### 7.1 계약서 템플릿 파일 구조 (assets/contracts/House_Lease_Agreement/)
```
House_Lease_Agreement/
├── contract_generator.js          # 계약서 생성 스크립트
├── contract_input.html            # 계약서 입력 폼
├── House_Lease_Agreement.html     # 메인 계약서 템플릿
├── House_Lease_Agreement_1.html   # 계약서 페이지 1
├── House_Lease_Agreement_2.html   # 계약서 페이지 2
├── House_Lease_Agreement_3.html   # 계약서 페이지 3
├── House_Lease_Agreement_4.html   # 계약서 페이지 4
├── House_Lease_Agreement_5.html   # 계약서 페이지 5
├── House_Lease_Agreement_style.css # 계약서 스타일
└── index.html                     # 계약서 뷰어
```

#### 7.2 계약서 데이터 매핑
```javascript
// contract_generator.js에서 사용되는 데이터 매핑
const contractData = {
  // 임대인 정보
  lessor_name: formData.lessor_name,
  lessor_address: formData.lessor_address,
  lessor_phone: formData.lessor_phone,
  lessor_registration_number: formData.lessor_registration_number,
  
  // 부동산 정보
  property_address: formData.property_address,
  property_type: formData.property_type,
  property_area: formData.property_area,
  property_land_purpose: formData.property_land_purpose,
  property_land_area: formData.property_land_area,
  
  // 계약 조건
  rent_type: formData.rent_type,
  deposit_amount: formData.deposit_amount,
  monthly_rent: formData.monthly_rent,
  management_fee: formData.management_fee,
  
  // 계약 기간
  handover_date: formData.handover_date,
  contract_start: formData.contract_start,
  contract_end: formData.contract_end,
  repair_completion_date: formData.repair_completion_date,
  
  // 임차인 정보
  lessee_name: formData.lessee_name,
  lessee_phone: formData.lessee_phone,
  lessee_address: formData.lessee_address,
  
  // 등기 정보
  registration_office: formData.registration_office,
  registration_number: formData.registration_number,
  registration_date: formData.registration_date,
  
  // 특별약정
  special_agreement: formData.special_agreement,
  
  // 계약일자
  contract_date: formData.contract_date,
};
```

### 8. 에러 처리 및 검증

#### 8.1 주요 검증 규칙
1. **필수 필드 검증**: 임대인, 부동산 주소, 보증금, 월세, 임차인
2. **날짜 형식 검증**: YYYY-MM-DD 형식
3. **금액 형식 검증**: 숫자만 허용 (쉼표 제거)
4. **전화번호 형식 검증**: 숫자와 하이픈만 허용
5. **주민번호 형식 검증**: 13자리 숫자

#### 8.2 에러 메시지 처리
```dart
// 사용자 친화적 에러 메시지
final errorMessages = {
  'required_field': '필수 입력 항목입니다.',
  'invalid_date': '올바른 날짜 형식(YYYY-MM-DD)으로 입력해주세요.',
  'invalid_amount': '숫자로 입력해주세요.',
  'invalid_phone': '올바른 전화번호 형식으로 입력해주세요.',
  'invalid_registration': '올바른 주민등록번호 형식으로 입력해주세요.',
};
```

### 9. 성능 최적화 및 개선사항

#### 9.1 현재 구현의 장점
1. **자동 입력**: 등기부등본 데이터 기반 자동 입력
2. **실시간 검증**: 입력 시점에 즉시 검증
3. **사용자 친화적 UI**: 직관적인 폼 구성
4. **날짜 선택기**: 캘린더 기반 날짜 선택

#### 9.2 개선 가능한 부분
1. **자동 저장**: 임시 저장 기능
2. **템플릿 선택**: 다양한 계약서 템플릿
3. **서명 기능**: 디지털 서명 연동
4. **PDF 미리보기**: 실시간 PDF 생성
5. **계약서 히스토리**: 수정 이력 관리

### 10. 실제 사용 예시

#### 10.1 정상적인 계약서 작성 흐름
```
1. 등기부등본 조회 성공
2. "계약서 작성하기" 버튼 클릭
3. ContractInputFormScreen 화면 이동
4. 등기부등본 데이터 자동 입력
5. 사용자 추가 정보 입력
6. 폼 검증 실행
7. 계약서 데이터 생성
8. 성공 메시지 표시
9. 이전 화면으로 복귀
```

#### 10.2 에러 상황 처리
```
1. 필수 필드 누락: "입력 정보를 확인해주세요."
2. 날짜 형식 오류: "올바른 날짜 형식(YYYY-MM-DD)으로 입력해주세요."
3. 금액 형식 오류: "숫자로 입력해주세요."
4. 등기부등본 파싱 실패: 기본값으로 초기화
```

이 계약서 작성 프로세스는 등기부등본 데이터를 기반으로 한 자동 입력부터 사용자 정의 입력, 실시간 검증, 최종 제출까지 모든 단계를 체계적으로 처리하며, 사용자 친화적인 인터페이스와 견고한 데이터 검증을 제공합니다. 